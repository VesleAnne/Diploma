
version: '3'
services:
    message-broker:
        image: rabbitmq:3-management-alpine
        container_name: message-broker
        restart: always
        networks:
          - greendata-network
          
    bot:
        build:
          context: .
          dockerfile: Dockerfile-python
        environment:
          QA_MODEL: "${QA_MODEL}"
          FAQ_EMBEDDINGS: "${FAQ_EMBEDDINGS}"
          CHUNK_SIZE: "${CHUNK_SIZE}"
          QUEUE_NAME_IN: "${QUEUE_NAME_IN}"
          AMQP_SERVER_URL: "${AMQP_SERVER_URL}"
          QUEUE_NAME_OUT: "${QUEUE_NAME_OUT}"
          USE_GPU: "${USE_GPU}"
          REDIS_HOST: "${REDIS_HOST}"
          REDIS_PORT: "${REDIS_PORT}"
          SAVE_FILE: "${SAVE_FILE}"
          OUT_FILE_PATH: "${OUT_FILE_PATH}"
        container_name: greendata_bot
        restart: always
        depends_on:
            - redis
        networks:
            - greendata-network


    redis:
        image: redis:alpine
        container_name: redis-greendata
        restart: always
        networks:
            - greendata-network

    postgres:
      image: postgres
      container_name: postgres
      restart: always
      environment:
        POSTGRES_DB: "${DB_NAME}"
        POSTGRES_USER: "${DB_USER}"
        POSTGRES_PASSWORD: "${DB_PASSWORD}"
        POSTGRES_PORT: "${DB_PORT}"
        POSTGRES_SSL: "${DB_SSL}"
      networks:
        - greendata-network

    sender:
        container_name: sender
        ports:
          - "${API_PORT}:3000"
        build:
          context: .
          dockerfile: Dockerfile-sender
        environment:
          AMQP_SERVER_URL: "${AMQP_SERVER_URL}"
          QUEUE_NAME_IN: "${QUEUE_NAME_IN}"
          QUEUE_NAME_OUT: "${QUEUE_NAME_OUT}"
          POSTGRES_URL: "postgresql://${DB_USER}:${DB_PASSWORD}@postgres:${DB_PORT}?sslmode=${DB_SSL}"
          CHUNK_SIZE: "${CHUNK_SIZE}"
        restart: always
        networks:
          - greendata-network
        depends_on:
          - message-broker
          - postgres

    consumer:
        container_name: consumer
        build:
          context: .
          dockerfile: Dockerfile-consumer
        environment:
          AMQP_SERVER_URL: "${AMQP_SERVER_URL}"
          QUEUE_NAME_IN: "${QUEUE_NAME_IN}"
          QUEUE_NAME_OUT: "${QUEUE_NAME_OUT}"
          POSTGRES_URL: "postgresql://${DB_USER}:${DB_PASSWORD}@postgres:${DB_PORT}?sslmode=${DB_SSL}"
        restart: always
        networks:
          - greendata-network
        depends_on:
          - sender
          - message-broker
          - postgres

networks:
  greendata-network:
    driver: bridge
